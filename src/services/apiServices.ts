// Third-party library imports
import axios from "axios";

const URL = "http://localhost:5000";
const API_BASE_URL = `${URL}/api/trivia`;

interface Question {
  id: number;
  category: string;
  question: string;
  options: string[];
  answer: string;
}

/**
 * API service for managing trivia questions.
 * Provides methods for creating, retrieving, updating, and deleting questions.
 */
const apiServices = {
  /**
   * Creates a new trivia question.
   *
   * @param category - The category in which the question will be added.
   * @param questionData - The question details excluding the `id` (generated by the server).
   * @returns A promise resolving to the newly created `Question` object.
   * @throws Will throw an error if the API request fails.
   */
  async createQuestion(
    category: string,
    questionData: Omit<Question, "id">
  ): Promise<Question> {
    try {
      const response = await axios.post<Question>(
        `${API_BASE_URL}/categories/${category}`,
        questionData
      );
      return response.data;
    } catch (error) {
      console.error(
        `Error creating question in category "${category}":`,
        error
      );
      throw error;
    }
  },

  /**
   * Retrieves all available trivia categories.
   *
   * @returns A promise resolving to an array of category names.
   * @throws Will throw an error if the API request fails.
   */
  async getAllCategories(): Promise<string[]> {
    try {
      const response = await axios.get<string[]>(`${API_BASE_URL}/categories`);
      return response.data;
    } catch (error) {
      console.error("Error fetching categories:", error);
      throw error;
    }
  },

  /**
   * Retrieves all trivia questions within a given category.
   *
   * @param category - The category from which to fetch questions.
   * @returns A promise resolving to an array of `Question` objects.
   * @throws Will throw an error if the API request fails.
   */
  async getAllQuestions(category: string): Promise<Question[]> {
    try {
      const response = await axios.get<Question[]>(
        `${API_BASE_URL}/categories/${category}`
      );
      return response.data;
    } catch (error) {
      console.error(
        `Error fetching questions for category "${category}":`,
        error
      );
      throw error;
    }
  },

  /**
   * Retrieves a specific trivia question by its ID.
   *
   * @param category - The category of the question.
   * @param id - The unique ID of the question.
   * @returns A promise resolving to the `Question` object.
   * @throws Will throw an error if the API request fails.
   */
  async getQuestionById(category: string, id: number): Promise<Question> {
    try {
      const response = await axios.get<Question>(
        `${API_BASE_URL}/categories/${category}/${id}`
      );
      return response.data;
    } catch (error) {
      console.error(
        `Error fetching question ${id} in category "${category}":`,
        error
      );
      throw error;
    }
  },

  /**
   * Updates an existing trivia question.
   *
   * @param category - The category of the question.
   * @param id - The unique ID of the question to update.
   * @param updatedData - The updated question data.
   * @returns A promise resolving to the updated `Question` object.
   * @throws Will throw an error if the API request fails.
   */
  async updateQuestion(
    category: string,
    id: number,
    updatedData: Partial<Question>
  ): Promise<Question> {
    try {
      const response = await axios.patch<Question>(
        `${API_BASE_URL}/categories/${category}/${id}`,
        updatedData
      );
      return response.data;
    } catch (error) {
      console.error(
        `Error updating question ${id} in category "${category}":`,
        error
      );
      throw error;
    }
  },

  /**
   * Deletes a trivia question by its ID within a given category.
   *
   * @param category - The category of the question.
   * @param id - The unique ID of the question to be deleted.
   * @returns A promise resolving to a success message.
   * @throws Will throw an error if the API request fails.
   */
  async deleteQuestion(
    category: string,
    id: number
  ): Promise<{ message: string }> {
    try {
      const response = await axios.delete<{ message: string }>(
        `${API_BASE_URL}/categories/${category}/${id}`
      );
      return response.data;
    } catch (error) {
      console.error(
        `Error deleting question ${id} in category "${category}":`,
        error
      );
      throw error;
    }
  },
};

export default apiServices;
